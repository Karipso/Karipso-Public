###############################################
# Name: Anil Celik Maral
# Cruz ID: amaral
# amaral@ucsc.edu
# Student ID: 1454995
# CMPS101, Programming Assignment-4(pa)
# Date: 11/18/17
###############################################

--Submitted Files--
List.c, List.h, Graph.c, Graph.h, GraphTest.c, FindPath.c, Makefile and README.

List.c: This is the file in which we create the interface for listADT. It includes the functions
that are necessary to work with a List which is essentially a doubly-linked list. In this project,
we use ListADT to hold the adjacency list of a vertex for a graph. The listADT is actually the
underlying structure that makes Graph.c work. For example, the fifo queue in the BFS function is
implemented as a list. Also, many functions in Graph.c use List.c functions.

List.h: This the file where the functions and data types(structs) that are used in List.c are
defined. It holds the prototypes for the functions and explains their functions. I added a couple
of functions named isEmpty(), newNode() and freeNode to use only in List.c. Additionally, the
structs created here includes their pointers. This is accomplished by using the pre-definition
method. This way we can use typedef-ed struct inside themselves to point to themselves. The
functions defined in this file are used by Graph.c and FindPath.c to manipulate a graphADT.

Graph.c: This is the file in which we create the interface for graphADT. It creates functions
including the creating a new graph, using the breadth first search to create the BFS tree,
add an undirected and a directed edge etc. To sum it up, it has all the necessary functions
to work with a graph using the BFS search.

Graph.h: This is the file where the functions and data types(structs), defines and macros etc.
are defined. It holds the prototypes for the functions and explains their functions. It also
includes the #define of List.h because the functions in this header uses the functions in
List.h to implement a graphADT to work with the BFS.

GraphTest.c: This is our main file where I tested my functions that I created in Graph.c in
isolation to make sure they worked and to help me debug. It calls all of the functions but
it doesn't consider every possible edge case. It was the step before using the pa4 script to
check my program.

FindPath.c: This is our main file of our assignment, it utilizes the functions in List.c and
Graph.c to be able to process an input file that has the predetermined coding to build an
adjacency list for a particular graph and run the BFS for certain sources and destinations.
To do this it utilizes IO functions that are available in the C library. It also takes an
output file to print the built adjacency list and the distances and paths for particular
cases of sources and destinations. It uses BFS to calculate the distances and the paths.
After it is done, it frees all the memory used by it and then closes the input and output
files.

Makefile: This is the file that is used to conveniently compile the required files and delete them
if need be.

README: The documentation for this assignment.