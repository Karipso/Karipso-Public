###############################################
# Name: Anil Celik Maral
# Cruz ID: amaral
# amaral@ucsc.edu
# Student ID: 1454995
# CMPS101, Programming Assignment-2(pa)
# Date: 10/13/17
###############################################

--Submitted Files--
List.h, List.c, ListClient.c, Lex.c, Makefile and README.

List.h: This the file where the functions and data types(structs) that are used in List.c are
defined. It holds the prototypes for the functions and explains their functions. I added a couple
of functions named isEmpty(), newNode() and freeNode to use only in List.c. Additionally, the
structs created here includes their pointers. This is accomplished by using the pre-definition
method. This way we can use typedef-ed struct inside themselves to point to themselves.

List.c: This is the file in which we create the interface for listADT. It includes the functions
that are necessary to work with a List which is essentially a doubly-linked list. In this project,
we use ListADT to hold the sorted sequence of indexes for stringarray[] that has words. The
list is used to sort the stringArray[] indirectly. Then, it is used to print(write) the words in
the correct order to a file.

ListClient.c: This source code was provided by Prof. Tantalo on the class website to test our
List.c functions. It tests most of them.

Lex.c: This is our main file where we use List.c. Here, we first get two command line
arguments which correspond to argv[1] = input file and argv[2] = output file. We read the
number of words in the input file and then create an array of enough size to hold those
words. Afterward, I created an int array[] to hold the indexes that were going to be sorted.
I used insertion sort to sort the indexes. Before doing so, I create a List object named myList
which is initially empty. After the insertion sort, the indexes are sorted and hold by the
integer array[]. Since we were expected to insert the indexes to our list in a sorted order,
I append()ed the elements of the integer array[] from the beginning to the end of the empty
list. Now, myList holds the sorted sequence of indexes. Afterward, I open the output file
indicated by argv[2] and write the words into it using myList as the index. This way the words are
printed in an alphabetically sorted way as the ones that come first are on the top and the ones
that come later are on the bottom. Lastly, I delete all the used elements to free the memory space.

Makefile: This is the file that is used to conveniently compile the required files and delete them
if need be.

README: The documentation for this assignment.

Note: I didn't alter the Makefile provided neither ListClient.c. I didn't put my name etc. at
the top of ListClient.c because in the pdf it clearly says do not alter.